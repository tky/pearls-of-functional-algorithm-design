import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers

import Minfree._

class MinfreeSpec extends AnyFlatSpec with Matchers {
  // This is a test for the minfree function generated by the copilot, wow!
  "minfree" should "find the minimum free number" in {
    minfree(Array(0, 1, 2, 3, 4, 5, 6, 7, 9)) should be(8)
    minfree(Array(0, 1, 2, 3, 4, 5, 6, 8, 9)) should be(7)
    minfree(Array(0, 1, 2, 3, 4, 5, 7, 8, 9)) should be(6)
    minfree(Array(0, 1, 2, 3, 4, 6, 7, 8, 9)) should be(5)
    minfree(Array(0, 1, 2, 3, 5, 6, 7, 8, 9)) should be(4)
    minfree(Array(0, 1, 2, 4, 5, 6, 7, 8, 9)) should be(3)
    minfree(Array(0, 1, 3, 4, 5, 6, 7, 8, 9)) should be(2)
    minfree(Array(0, 2, 3, 4, 5, 6, 7, 8, 9)) should be(1)
    minfree(Array(1, 2, 3, 4, 5, 6, 7, 8, 9)) should be(0)
  }

  "search" should "return a length of a prefix of a list of booleans" in {
    search(Array(true, true, true, false, false, false)) should be(3)
    search(Array(true, true, true, true, false, false)) should be(4)
    search(Array(true, true, true, true, true, false)) should be(5)
    search(Array(true, true, true, true, true, true)) should be(6)
    search(Array(false, false, false, false, false, false)) should be(0)
  }

  "accumArary" should "accumurates a array" in {
    accumArray[Int](_ + _, 0, (0, 4), Seq((1, 3), (3, 2), (4, 1))) should be(
      Array(0, 3, 0, 2, 1)
    )
  }

  "serach . checklist" should "find the minimum free number" in {
    def func(xs: Array[Int]): Int = search(checklist(xs))
    func(Array(0, 1, 2, 3, 4, 5, 6, 7, 9)) should be(8)
    func(Array(0, 1, 2, 4, 5, 6, 7, 8, 9)) should be(3)
  }

  "minfree2" should "find the minimum free number" in {
    minfree2(Array(0, 1, 2, 3, 4, 5, 6, 7, 9)) should be(8)
    minfree2(Array(0, 1, 2, 3, 4, 5, 6, 8, 9)) should be(7)
    minfree2(Array(0, 1, 2, 3, 4, 5, 7, 8, 9)) should be(6)
    minfree2(Array(0, 1, 2, 3, 4, 6, 7, 8, 9)) should be(5)
    minfree2(Array(0, 1, 2, 3, 5, 6, 7, 8, 9)) should be(4)
    minfree2(Array(0, 1, 2, 4, 5, 6, 7, 8, 9)) should be(3)
    minfree2(Array(0, 1, 3, 4, 5, 6, 7, 8, 9)) should be(2)
    minfree2(Array(0, 2, 3, 4, 5, 6, 7, 8, 9)) should be(1)
    minfree2(Array(1, 2, 3, 4, 5, 6, 7, 8, 9)) should be(0)
  }

}
